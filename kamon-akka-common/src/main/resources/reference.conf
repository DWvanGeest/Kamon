# ================================== #
# Kamon-Akka Reference Configuration #
# ================================== #

kamon.instrumentation.akka {

  # If ask-pattern-timeout-warning is enabled, a WARN level log message will be generated if a Future generated by the
  # "ask" pattern fails with an AskTimeoutException and the log message will contain information depending of the
  # selected strategy. The possible values are:
  #
  #   - off: nothing gets logged.
  #   - lightweight: logs a warning when a timeout is reached using source location.
  #   - heavyweight: logs a warning when a timeout is reached using a stack trace captured at the moment the future was created.
  #
  ask-pattern-timeout-warning = off

  auto-grouping = on

  # Filters control how and if the instrumentation will track the behavior of Akka Actors, Routers, Dispatchers and
  # Actor Groups. All filters have two groups of patterns: includes and excludes; inputs matching at least one of the
  # includes patterns and none of the excludes patterns will be accepted. You can read more about filters on the Kamon
  # documentation: https://kamon.io/docs/latest/core/utilities/
  #
  # The test string for the filters is always starting with the Actor System name, followed by the path to the
  # component being tested. For example, when testing for a "test" actor created at the root of the "akka-example" Actor
  # System, the test string for the filter will be "akka-example/user/test" and, when testing the default dispatcher for
  # that same Actor System the test string for the filters will be "akka-example/akka.actor.default-dispatcher".
  #
  filters {
    actors {

      #
      #
      doomsday-wildcard = off

      # Decides which actors will have metric tracking enabled.
      #
      track {
        includes = []
        excludes = [ "*/system/**", "*/user/IO-**" ]
      }

      # Decides which actors generate Spans for the messages they process, given that there is already an ongoing trace
      # in the Context of the processed message (i.e. there is a Sampled Span in the Context).
      #
      trace {
        includes = [ "*/user/**", "*/system/sharding**" ]
        excludes = []
      }

      # Decides which actors generate Spans for the messages they process, even if that requires them to start a new
      # trace. Use with care, starting traces with a broad filter (e.g. using includes = [ "**" ]) can generate a huge
      # amount of traces from scheduled actions and underlying system components that most likely will not improve
      # observability of the system and burry useful traces underneath the noise.
      #
      start-trace {
        includes = []
        excludes = []
      }
    }

    # Decides which routers should have metric tracking enabled.
    #
    routers {
      includes = []
      excludes = []
    }

    # Decides which dispatchers should have metric tracking enabled.
    #
    dispatchers {
      includes = [ "**" ]
      excludes = []
    }

    # Defines actor groups and the filters that match all actors that should be part of that group. To define a new
    # group, add a configuration like the following:
    #
    #   kamon.instrumentation.akka.filters.groups {
    #     worker-actors {
    #       includes = ["my-system/user/application/worker-*", "my-system/user/workers/**"]
    #       excludes = [ ]
    #     }
    #   }
    #
    # The configuration key immediately inside the "groups" path corresponds to the group name and the configuration
    # inside of it should contain a Kamon filter (with the includes/excludes settings).
    groups {

    }
  }
}

kanela.modules {

  akka {
    name = "Akka Instrumentation"
    description = "Provides metrics and message tracing for Akka Actor Systems, Actors, Routers and Dispatchers"

    instrumentations = [
      "kamon.instrumentation.akka.instrumentations.EnvelopeInstrumentation",
      "kamon.instrumentation.akka.instrumentations.SystemMessageInstrumentation",
      "kamon.instrumentation.akka.instrumentations.RouterInstrumentation",
      "kamon.instrumentation.akka.instrumentations.ActorInstrumentation",
      "kamon.instrumentation.akka.instrumentations.DispatcherInstrumentation",
      "kamon.instrumentation.akka.instrumentations.ActorLoggingInstrumentation",
      "kamon.instrumentation.akka.instrumentations.AskPatternInstrumentation",
      "kamon.instrumentation.akka.instrumentations.EventStreamInstrumentation",
      "kamon.instrumentation.akka.instrumentations.ActorRefInstrumentation"
    ]

    within = [
      "^akka.dispatch..*",
      "^akka.event..*",
      "^akka.actor..*",
      "^akka.pattern..*",
      "^akka.routing..*"
    ]
  }
}