# ================================== #
# Kamon-Core Reference Configuration #
# ================================== #

kamon {
  metrics {

    # Time interval at which Kamon will collect all metrics and send them to all subscribed actors.
    tick-interval = 1 second

    # Time interval at which Kamon will record values for all registered gauges.
    gauge-recording-interval = 100 milliseconds

    dispatchers {

      # All Gauges record values periodically according to the `kamon.metrics.gauge-recording-interval` setting.
      # This dispatcher is the one to be used to execute the recording code.
      gauge-recordings = "akka.actor.default-dispatcher"

      # Dispatcher for the actor managing all subscriptions and metrics collection.
      metric-subscriptions = "akka.actor.default-dispatcher"
    }


    filters = [
      {
        actor {
          includes = []
          excludes = [ "system/*", "user/IO-*" ]
        }
      },
      {
        trace {
          includes = [ "*" ]
          excludes = []
        }
      },
      {
        dispatcher {
          includes = [ "default-dispatcher" ]
          excludes = []
        }
      }
    ]

    precision {
      actor {
        processing-time {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        time-in-mailbox {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        mailbox-size {
          highest-trackable-value = 999999999
          significant-value-digits = 2
        }
      }

      trace {
        elapsed-time {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        segment {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
      }
    }
  }

  trace {

    # If ask-pattern-tracing is enabled, a WARN level log message will be generated if a future generated by the `ask`
    # pattern fails with a `AskTimeoutException` and the log message will contain a stack trace captured at the moment
    # the future was created.
    ask-pattern-tracing = off
  }

  weaver {

    # AspectJ options supported by LTW
    # showWeaveInfo: show informational messages whenever the weaver touches a class file.
    # verbose: show informational messages about the weaving process.
    # debug: show a messages for each class passed to the weaver indicating whether it was woven, excluded or ignored.
    # showWarn: show warning messages about the weaving process.

    showWeaveInfo = off
    verbose = off
    debug = off
    showWarn = off
  }
}