# ================================== #
# Kamon-Core Reference Configuration #
# ================================== #

kamon {
  metrics {
    tick-interval = 1 second

    filters = [
      {
        actor {
          includes = []
          excludes = [ "system/*", "user/IO-*" ]
        }
      },
      {
        trace {
          includes = [ "*" ]
          excludes = []
        }
      },
      {
        dispatcher {
          includes = [ "default-dispatcher" ]
          excludes = []
        }
      }
    ]

    precision {
      actor {
        processing-time {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        time-in-mailbox {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        mailbox-size {
          highest-trackable-value = 999999999
          significant-value-digits = 2
        }
      }

      trace {
        elapsed-time {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
        segment {
          highest-trackable-value = 3600000000000
          significant-value-digits = 2
        }
      }
    }
  }

  default-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher

    # What kind of ExecutionService to use
    executor = "fork-join-executor"

    # Configuration for the fork join pool
    fork-join-executor {

      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2

      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 10
    }

    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }


  trace {
    # If ask-pattern-tracing is enabled, a WARN level log message will be generated if a future generated by the `ask`
    # pattern fails with a `AskTimeoutException` and the log message will contain a stack trace captured at the moment
    # the future was created.
    ask-pattern-tracing = off
  }

  weaver {
    # AspectJ options supported by LTW
    # showWeaveInfo: show informational messages whenever the weaver touches a class file.
    # verbose: show informational messages about the weaving process.
    # debug: show a messages for each class passed to the weaver indicating whether it was woven, excluded or ignored.
    # showWarn: show warning messages about the weaving process.

    showWeaveInfo = off
    verbose = off
    debug = off
    showWarn = off
  }
}